---
import { giscusConfig } from "../config";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";

interface Props {
	class?: string;
}

const className = Astro.props.class;
const { repo, repoId, categoryId, lang } = giscusConfig;
---

<div class:list={["card-base px-6 py-4", className]}>
  <div class="giscus"
    data-repo={repo}
    data-repo-id={repoId}
    data-category-id={categoryId}
    data-lang={lang}
  ></div>
</div>

<script>
  let giscusLoaded = false;

  const setGiscusTheme = () => {
    const giscusFrame = document.querySelector('iframe.giscus-frame');
    if (giscusFrame && giscusFrame instanceof HTMLIFrameElement) {
      giscusFrame.contentWindow?.postMessage(
        { giscus: { setConfig: { theme: document.documentElement.classList.contains('dark') ? 'dark_dimmed' : 'light' } } },
        'https://giscus.app'
      );
    } else {
      // If iframe not found, retry after a short delay
      setTimeout(setGiscusTheme, 500);
    }
  };

  const loadGiscus = () => {
    const container = document.querySelector('.giscus');
    if (!container) return;

    container.innerHTML = '';

    // 通过 dataset 读取参数，确保 container 为 HTMLElement
    let repo = '', repoId = '', categoryId = '', lang = '';
    if (container instanceof HTMLElement) {
      ({
        repo = '',
        repoId = '',
        categoryId = '',
        lang = ''
      } = container.dataset);
    }

    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', repo);
    script.setAttribute('data-repo-id', repoId);
    script.setAttribute('data-category', 'General');
    script.setAttribute('data-category-id', categoryId);
    script.setAttribute('data-mapping', 'title');
    script.setAttribute('data-strict', '0');
    script.setAttribute('data-reactions-enabled', '1');
    script.setAttribute('data-emit-metadata', '1');
    script.setAttribute('data-input-position', 'top');
    script.setAttribute('data-theme', document.documentElement.classList.contains('dark') ? 'dark_dimmed' : 'light');
    script.setAttribute('data-lang', lang);
    script.setAttribute('crossorigin', 'anonymous');
    script.async = true;

    container.appendChild(script);
    giscusLoaded = true;

    // After loading Giscus script, try to set theme with a delay for iframe to render.
    setTimeout(setGiscusTheme, 500);
  };

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class') {
        setGiscusTheme(); // Call theme setter on class change
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class']
  });

  const initComments = () => {
    loadGiscus();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initComments);
  } else {
    initComments();
  }

  // Setup Swup hooks for page transitions
  const setupSwupHooks = () => {
    if (window.swup) {
      window.swup.hooks.on('content:replace', () => {
        // Re-initialize comments after content replacement
        setTimeout(() => {
          const giscusContainer = document.querySelector('.giscus');
          if (giscusContainer) {
            // Comments will be re-initialized automatically
          }
        }, 100);
      });
    } else {
      document.addEventListener("swup:enable", setupSwupHooks);
    }
  };

  setupSwupHooks();
</script> 