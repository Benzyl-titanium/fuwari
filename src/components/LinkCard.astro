---
import { onMount } from "astro/client";
import { useState } from "preact/hooks";

interface Props {
	name: string;
	url: string;
	icon?: string;
	desc?: string;
	tags?: string[];
}
const { name, url, icon, desc, tags } = Astro.props;
const fallbackIcon = "/imgs/benzene.png";

let meta = {
	title: url,
	description: "",
	icon: "",
	image: "",
};

try {
	const res = await fetch(url, { headers: { "User-Agent": "Mozilla/5.0" } });
	const html = await res.text();
	const titleMatch = html.match(/<title>(.*?)<\/title>/i);
	const descMatch = html.match(
		/<meta[^>]+name=["']description["'][^>]+content=["']([^"']+)["'][^>]*>/i,
	);
	const iconMatch = html.match(
		/<link[^>]+rel=["']icon["'][^>]+href=["']([^"']+)["'][^>]*>/i,
	);
	const ogImgMatch = html.match(
		/<meta[^>]+property=["']og:image["'][^>]+content=["']([^"']+)["'][^>]*>/i,
	);
	meta.title = titleMatch ? titleMatch[1] : url;
	meta.description = descMatch ? descMatch[1] : "";
	meta.icon = iconMatch ? iconMatch[1] : "";
	meta.image = ogImgMatch ? ogImgMatch[1] : "";
	if (meta.icon && !meta.icon.startsWith("http")) {
		const u = new URL(meta.icon, url);
		meta.icon = u.href;
	}
	if (meta.image && !meta.image.startsWith("http")) {
		const u = new URL(meta.image, url);
		meta.image = u.href;
	}
} catch (e) {
	// ignore
}

function getFavicon(url: string) {
	try {
		const hostname = new URL(url).hostname;
		return `https://www.google.com/s2/favicons?domain=${hostname}&sz=64`;
	} catch {
		return fallbackIcon;
	}
}
const iconUrl =
	icon && icon.trim() !== ""
		? icon
		: meta.icon && meta.icon.trim() !== ""
			? meta.icon
			: getFavicon(url);
---
<a href={url} class="card-github linkcard" target="_blank" rel="noopener noreferrer">
  <div class="gc-titlebar">
    <div class="gc-titlebar-left">
      <div class="gc-owner">
        <div class="gc-avatar" style={`background-image:url('${iconUrl}');background-color:transparent;`}></div>
        <div class="gc-user">{name}</div>
      </div>
    </div>
    <div class="github-logo"></div>
  </div>
  <div class="gc-description">{desc}</div>
  {tags && tags.length > 0 && (
    <div class="gc-infobar">
      {tags.map(tag => (
        <span class="gc-language">
          <svg class="gc-tag-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><title>tag-outline</title><path d="M21.41 11.58L12.41 2.58A2 2 0 0 0 11 2H4A2 2 0 0 0 2 4V11A2 2 0 0 0 2.59 12.42L11.59 21.42A2 2 0 0 0 13 22A2 2 0 0 0 14.41 21.41L21.41 14.41A2 2 0 0 0 22 13A2 2 0 0 0 21.41 11.58M13 20L4 11V4H11L20 13M6.5 5A1.5 1.5 0 1 1 5 6.5A1.5 1.5 0 0 1 6.5 5Z" /></svg>
          {tag}
        </span>
      ))}
    </div>
  )}
</a>
<style is:global>
.dark .card-github,
.dark .card-github .gc-titlebar,
.dark .card-github .gc-description,
.dark .card-github .gc-infobar,
.dark .card-github .gc-language,
.dark .card-github .gc-user {
  color: #fff !important;
}
</style>
<style>
@import "../styles/markdown-extend.styl";
.linkcard { display: block; text-decoration: none; }
.gc-language {
  font-weight: 400;
}
.gc-user {
  transition: color 0.15s;
  font-weight: 600;
}
.card-github.linkcard:hover .gc-user {
  color: var(--primary) !important;
}
.gc-tag-icon {
margin-right: 6px;
vertical-align: middle;
}
</style>
